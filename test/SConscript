# Define env.Run
# env.Run runs our tests and writes a copy of the test log to disk
run = Builder(action = "$SOURCE | tee $TARGET")
# Define env.Gcov
# env.Gcov generates a code coverage report for each source file in our project
gcov = Builder(action = "gcov -b $SOURCE | tee $TARGET")

# Add our Run and Gcov commands to the build
env = Environment(BUILDERS = { "Run" : run, "Gcov" : gcov })

# Make sure gcc runs with gcov enabled
env.Append(CFLAGS = ["-fprofile-arcs", "-ftest-coverage"])
env.Append(LIBS = ["gcov"])

# Define all the files that need to go into the test binary
files = Glob("*.c")
files.extend(Glob("lib/*.c"))
files.extend(Glob("src/*.c"))
files.extend(["deps/minibsdiff/bsdiff.c","deps/minibsdiff/bspatch.c",])

# Build the test binary
env.Program("test", files);
# Once the test binary is built, run it, also tell Scons that this generates
# a test.log file
env.Run("test.log", [ "test" ])

# Report code coverage for each file in our src/ directory
for f in Glob("src/*.c"):
    env.Gcov(f.name + ".coverage", f.name)
    # Make sure SCons knows about the coverage data so it can clean it up
    env.Depends(f.name + ".coverage", "test.log")

# Tell SCons about the gcov files generated by gcc so it can clean them up
for f in files:
    name = str(f).split(".")[0]
    # SCons will clean up our gcov files whenever it cleans up test.log
    env.Clean("test.log", [name + ".gcda", name + ".gcno"])

# Tell SCons about the coverage files generated when we run env.Gcov so it
# can clean them up
for f in Glob("src/*.c"):
    # SCons will clean up our coverage files when it cleans up test.log
    env.Clean("test.log", "../" + f.name + ".gcov")
